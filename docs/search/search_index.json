{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Tutorial for non-programmers","text":"<p>Git is a free and open source distributed version control system designed to  handle everything from small to very large projects with speed and efficiency.  It is the most popular version control system among professional programmers,  and this tutorial aims to making it understandable and usable by non-programmers.</p> <p>Git can be used both from the command-line interface (a.k.a. <code>cmd</code> under windows) or via a graphical user interface. This page describes the operations that Git can execute, independently from the type of interface and refers to other pages for  the CLI and GUI way of doing it.</p>"},{"location":"#lets-get-started-init","title":"Let's get started: <code>init</code>","text":"<p>Say that you have a folder <code>MyProject</code> containing some files (or empty) and you want to start  version-controlling it with git. To do that you ask git to run the <code>init</code> operation.</p> <p>The <code>git init</code> operation creates a <code>.git</code> subfolder inside the <code>MyProject</code> folder, which will hold all the git internal files. You don't need to be concerned about that folder; just don't delet it, or git will lost all its memory about the version history of <code>MyProject</code>.</p> <p>Learn how to perform the <code>git init</code> operation via the  CLI or via the GUI.</p>"},{"location":"#save-your-work-commit","title":"Save your work: <code>commit</code>","text":"<p>We all make backups of our work so now and then: we take the folder containig our work and we make a copy of it, namining it something like <code>MyProject_2024-10-14</code>. So, if anything goes wrong with the files in our working directory <code>MyProject</code>, we can always restore an older version of it.</p> <p>In git terms, this is a commit operation (to commit = consign or record for preservation). You run a <code>git commit</code> operation and git will make a copy of your working directory and give it a name for you. You can commit as many versions of your working directory as you want.</p> <p>Notice that git commit takes a snapshot of your entire working directory, but it does it in a smart and disk-space-efficient way: just the minimum amount of information strictly necessary will be stored on disk.</p> <p>We will visually represnt the working directory (WD) and its commits (git name for snapshot/backup)  as shown in the following picture.</p> <p></p> <p>Learn how to perform the <code>git commit</code> operation via the  CLI or via the GUI.</p>"},{"location":"#restore-your-work-checkout","title":"Restore your work: <code>checkout</code>","text":"<p>If you want to restore the working directory to the status it had at the moment of a certain commit, you run the <code>git checkout</code> operation.</p> <p></p> <p>Learn how to perform the <code>git checkout</code> operation via the  CLI or via the GUI.</p>"},{"location":"#try-new-ideas-branch","title":"Try new ideas: <code>branch</code>","text":"<p>There are situations when you may want to create a copy (WD2) of your working directory (WD1), try something new without messing up the original copy WD1 and  eventually, if your new idea works, delete the original WD1 and go back to having  only one version (WD2) of your work. If your new idea turns out to be a bad idea,  you can just delete the second copy WD2 of your working directory and go back to  the original copy WD1.</p> <p>The operation of creating a copy of your working directory, in Git is called <code>branching</code>; except that Git doesn't really create a copy of anything: the branch exists in the <code>.git</code> folder and you just choose which branch gets loaded in your working directory.</p> <p>Say that you have done 3 commits and that your working directory corresponds to the third commit. In git terms, you are on the <code>main branch</code> and the status of your project looks like the following figure.</p> <p></p> <p>When you create a new branch (say branch 'bravo'), it's like if a copy of  commit 03 is made internally by git.</p> <p></p> <p>Now you can switch to the branch 'bravo' and start committing changes to that branch, while the 'main' branch stays unchanged.</p> <p></p> <p>You can switch between your two branches as many times as you want. Every time you switch branch, the latest commit of that branche will be checked-out to your working directory. If you switch back to the 'main' branch, you can also keep committing changes to it.</p> <p></p> <p>Let's go back for a moment to the original metaphor of two copies of the same folder (the two branches of my project). And let's immagin that we have  modified both of them (committed changes in both branches). In such a situation, going back to one version that keeps all the changes made to both branches, can be a real pain. Git makes it easy, by implementing the <code>merge</code> command.</p> <p>Learn how to perform the <code>git branch</code> operations via the  CLI or via the GUI.</p>"},{"location":"#synchronize-branches-merge","title":"Synchronize branches: <code>merge</code>","text":"<p>The <code>git merge</code> command takes the last commits of two different branches and mixes  them together in a new commit, so that the new commit contains all the changes of both  the branches. The following figure shows merging the branch 'bravo' (commit 05) and  the branch 'main' (commit 07) into the new commit 08, which is then added to the 'main' branch.</p> <p></p> <p>Learn how to perform the <code>git merge</code> operations via the  CLI or via the GUI.</p>"},{"location":"#start-cooperating-on-existing-projects-clone","title":"Start cooperating on existing projects: <code>clone</code>","text":"<p>in progress ...</p>"},{"location":"#share-your-contributions-push","title":"Share your contributions: <code>push</code>","text":"<p>in progress ...</p>"},{"location":"#stay-in-sync-pull","title":"Stay in sync: <code>pull</code>","text":"<p>in progress ...</p>"},{"location":"about/","title":"About this tutorial","text":"<p>The Git Tutorial for non-programmers has been created within the Bolt and Beoutiful  GROW project by KCI.</p>"},{"location":"cli/","title":"Use Git via the Command-Line interface","text":""},{"location":"cli/#git-init-operation","title":"git init operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-commit-operation","title":"git commit operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-checkout-operation","title":"git checkout operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-branch-operations","title":"git branch operations","text":"<p>in progress ...</p>"},{"location":"cli/#git-merge-operation","title":"git merge operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-clone-operation","title":"git clone operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-push-operation","title":"git push operation","text":"<p>in progress ...</p>"},{"location":"cli/#git-pull-operation","title":"git pull operation","text":"<p>in progress ...</p>"},{"location":"gui/","title":"Using Git via the Graphical User Interface","text":""},{"location":"gui/#git-init-operation","title":"git init operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-commit-operation","title":"git commit operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-checkout-operation","title":"git checkout operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-branch-operations","title":"git branch operations","text":"<p>in progress ...</p>"},{"location":"gui/#git-merge-operation","title":"git merge operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-clone-operation","title":"git clone operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-push-operation","title":"git push operation","text":"<p>in progress ...</p>"},{"location":"gui/#git-pull-operation","title":"git pull operation","text":"<p>in progress ...</p>"}]}